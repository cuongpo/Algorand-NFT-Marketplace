{
  "hints": {
    "createCollection(string)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "mintNFT(string,string)uint64": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "mapNFTdata(asset,uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "listingNFT(asset,uint64,axfer)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "unListingNFT(uint64,asset)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "buyNFTFromMarketplace(uint64,pay,asset)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "createApplication()void": {
      "call_config": {
        "no_op": "CREATE"
      }
    }
  },
  "bare_call_config": {
    "no_op": "NEVER",
    "opt_in": "NEVER",
    "close_out": "NEVER",
    "update_application": "NEVER",
    "delete_application": "NEVER"
  },
  "schema": {
    "local": {
      "declared": {},
      "reserved": {}
    },
    "global": {
      "declared": {
        "collectionIndex": {
          "type": "uint64",
          "key": "collectionIndex"
        },
        "nft": {
          "type": "uint64",
          "key": "nft"
        },
        "nftIndex": {
          "type": "uint64",
          "key": "nftIndex"
        },
        "orderIndex": {
          "type": "uint64",
          "key": "orderIndex"
        }
      },
      "reserved": {}
    }
  },
  "state": {
    "global": {
      "num_byte_slices": 0,
      "num_uints": 4
    },
    "local": {
      "num_byte_slices": 0,
      "num_uints": 0
    }
  },
  "source": {
    "approval": "",
    "clear": "I3ByYWdtYSB2ZXJzaW9uIDk="
  },
  "contract": {
    "name": "AlgorandNftMarketplace",
    "desc": "",
    "methods": [
      {
        "name": "createCollection",
        "args": [
          {
            "name": "name",
            "type": "string",
            "desc": ""
          }
        ],
        "desc": "",
        "returns": {
          "type": "void",
          "desc": ""
        }
      },
      {
        "name": "mintNFT",
        "args": [
          {
            "name": "name",
            "type": "string",
            "desc": ""
          },
          {
            "name": "url",
            "type": "string",
            "desc": ""
          }
        ],
        "desc": "",
        "returns": {
          "type": "uint64",
          "desc": ""
        }
      },
      {
        "name": "mapNFTdata",
        "args": [
          {
            "name": "nft",
            "type": "asset",
            "desc": ""
          },
          {
            "name": "collectionId",
            "type": "uint64",
            "desc": ""
          }
        ],
        "desc": "",
        "returns": {
          "type": "void",
          "desc": ""
        }
      },
      {
        "name": "listingNFT",
        "args": [
          {
            "name": "nft",
            "type": "asset",
            "desc": ""
          },
          {
            "name": "price",
            "type": "uint64",
            "desc": ""
          },
          {
            "name": "axfer",
            "type": "axfer",
            "desc": ""
          }
        ],
        "desc": "",
        "returns": {
          "type": "void",
          "desc": ""
        }
      },
      {
        "name": "unListingNFT",
        "args": [
          {
            "name": "orderId",
            "type": "uint64",
            "desc": ""
          },
          {
            "name": "nft",
            "type": "asset",
            "desc": ""
          }
        ],
        "desc": "",
        "returns": {
          "type": "void",
          "desc": ""
        }
      },
      {
        "name": "buyNFTFromMarketplace",
        "args": [
          {
            "name": "orderId",
            "type": "uint64",
            "desc": ""
          },
          {
            "name": "payment",
            "type": "pay",
            "desc": ""
          },
          {
            "name": "nft",
            "type": "asset",
            "desc": ""
          }
        ],
        "desc": "",
        "returns": {
          "type": "void",
          "desc": ""
        }
      },
      {
        "name": "createApplication",
        "desc": "",
        "returns": {
          "type": "void",
          "desc": ""
        },
        "args": []
      }
    ]
  }
}