/* eslint-disable */
/**
 * This file was automatically generated by @algorandfoundation/algokit-client-generator.
 * DO NOT MODIFY IT BY HAND.
 * requires: @algorandfoundation/algokit-utils: ^2
 */
import * as algokit from '@algorandfoundation/algokit-utils'
import {
  AppCallTransactionResult,
  AppCallTransactionResultOfType,
  CoreAppCallArgs,
  RawAppCallArgs,
  AppState,
  TealTemplateParams,
  ABIAppCallArg,
} from '@algorandfoundation/algokit-utils/types/app'
import {
  AppClientCallCoreParams,
  AppClientCompilationParams,
  AppClientDeployCoreParams,
  AppDetails,
  ApplicationClient,
} from '@algorandfoundation/algokit-utils/types/app-client'
import { AppSpec } from '@algorandfoundation/algokit-utils/types/app-spec'
import { SendTransactionResult, TransactionToSign, SendTransactionFrom } from '@algorandfoundation/algokit-utils/types/transaction'
import { Algodv2, OnApplicationComplete, Transaction, TransactionWithSigner, AtomicTransactionComposer } from 'algosdk'
export const APP_SPEC: AppSpec = {
  "hints": {
    "createCollection(string)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "mintNFT(string,string)uint64": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "mapNFTdata(asset,uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "listingNFT(asset,uint64,axfer)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "unListingNFT(uint64,asset)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "buyNFTFromMarketplace(uint64,pay,asset)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "createApplication()void": {
      "call_config": {
        "no_op": "CREATE"
      }
    }
  },
  "bare_call_config": {
    "no_op": "NEVER",
    "opt_in": "NEVER",
    "close_out": "NEVER",
    "update_application": "NEVER",
    "delete_application": "NEVER"
  },
  "schema": {
    "local": {
      "declared": {},
      "reserved": {}
    },
    "global": {
      "declared": {
        "collectionIndex": {
          "type": "uint64",
          "key": "collectionIndex"
        },
        "nft": {
          "type": "uint64",
          "key": "nft"
        },
        "nftIndex": {
          "type": "uint64",
          "key": "nftIndex"
        },
        "orderIndex": {
          "type": "uint64",
          "key": "orderIndex"
        }
      },
      "reserved": {}
    }
  },
  "state": {
    "global": {
      "num_byte_slices": 0,
      "num_uints": 4
    },
    "local": {
      "num_byte_slices": 0,
      "num_uints": 0
    }
  },
  "source": {
    "approval": "",
    "clear": "I3ByYWdtYSB2ZXJzaW9uIDk="
  },
  "contract": {
    "name": "AlgorandNftMarketplace",
    "desc": "",
    "methods": [
      {
        "name": "createCollection",
        "args": [
          {
            "name": "name",
            "type": "string",
            "desc": ""
          }
        ],
        "desc": "",
        "returns": {
          "type": "void",
          "desc": ""
        }
      },
      {
        "name": "mintNFT",
        "args": [
          {
            "name": "name",
            "type": "string",
            "desc": ""
          },
          {
            "name": "url",
            "type": "string",
            "desc": ""
          }
        ],
        "desc": "",
        "returns": {
          "type": "uint64",
          "desc": ""
        }
      },
      {
        "name": "mapNFTdata",
        "args": [
          {
            "name": "nft",
            "type": "asset",
            "desc": ""
          },
          {
            "name": "collectionId",
            "type": "uint64",
            "desc": ""
          }
        ],
        "desc": "",
        "returns": {
          "type": "void",
          "desc": ""
        }
      },
      {
        "name": "listingNFT",
        "args": [
          {
            "name": "nft",
            "type": "asset",
            "desc": ""
          },
          {
            "name": "price",
            "type": "uint64",
            "desc": ""
          },
          {
            "name": "axfer",
            "type": "axfer",
            "desc": ""
          }
        ],
        "desc": "",
        "returns": {
          "type": "void",
          "desc": ""
        }
      },
      {
        "name": "unListingNFT",
        "args": [
          {
            "name": "orderId",
            "type": "uint64",
            "desc": ""
          },
          {
            "name": "nft",
            "type": "asset",
            "desc": ""
          }
        ],
        "desc": "",
        "returns": {
          "type": "void",
          "desc": ""
        }
      },
      {
        "name": "buyNFTFromMarketplace",
        "args": [
          {
            "name": "orderId",
            "type": "uint64",
            "desc": ""
          },
          {
            "name": "payment",
            "type": "pay",
            "desc": ""
          },
          {
            "name": "nft",
            "type": "asset",
            "desc": ""
          }
        ],
        "desc": "",
        "returns": {
          "type": "void",
          "desc": ""
        }
      },
      {
        "name": "createApplication",
        "desc": "",
        "returns": {
          "type": "void",
          "desc": ""
        },
        "args": []
      }
    ]
  }
}

/**
 * Defines an onCompletionAction of 'no_op'
 */
export type OnCompleteNoOp =  { onCompleteAction?: 'no_op' | OnApplicationComplete.NoOpOC }
/**
 * Defines an onCompletionAction of 'opt_in'
 */
export type OnCompleteOptIn =  { onCompleteAction: 'opt_in' | OnApplicationComplete.OptInOC }
/**
 * Defines an onCompletionAction of 'close_out'
 */
export type OnCompleteCloseOut =  { onCompleteAction: 'close_out' | OnApplicationComplete.CloseOutOC }
/**
 * Defines an onCompletionAction of 'delete_application'
 */
export type OnCompleteDelApp =  { onCompleteAction: 'delete_application' | OnApplicationComplete.DeleteApplicationOC }
/**
 * Defines an onCompletionAction of 'update_application'
 */
export type OnCompleteUpdApp =  { onCompleteAction: 'update_application' | OnApplicationComplete.UpdateApplicationOC }
/**
 * A state record containing a single unsigned integer
 */
export type IntegerState = {
  /**
   * Gets the state value as a BigInt 
   */
  asBigInt(): bigint
  /**
   * Gets the state value as a number.
   */
  asNumber(): number
}
/**
 * A state record containing binary data
 */
export type BinaryState = {
  /**
   * Gets the state value as a Uint8Array
   */
  asByteArray(): Uint8Array
  /**
   * Gets the state value as a string
   */
  asString(): string
}

/**
 * Defines the types of available calls and state of the AlgorandNftMarketplace smart contract.
 */
export type AlgorandNftMarketplace = {
  /**
   * Maps method signatures / names to their argument and return types.
   */
  methods:
    & Record<'createCollection(string)void' | 'createCollection', {
      argsObj: {
        name: string
      }
      argsTuple: [name: string]
      returns: void
    }>
    & Record<'mintNFT(string,string)uint64' | 'mintNFT', {
      argsObj: {
        name: string
        url: string
      }
      argsTuple: [name: string, url: string]
      returns: bigint
    }>
    & Record<'mapNFTdata(asset,uint64)void' | 'mapNFTdata', {
      argsObj: {
        nft: number | bigint
        collectionId: bigint | number
      }
      argsTuple: [nft: number | bigint, collectionId: bigint | number]
      returns: void
    }>
    & Record<'listingNFT(asset,uint64,axfer)void' | 'listingNFT', {
      argsObj: {
        nft: number | bigint
        price: bigint | number
        axfer: TransactionToSign | Transaction | Promise<SendTransactionResult>
      }
      argsTuple: [nft: number | bigint, price: bigint | number, axfer: TransactionToSign | Transaction | Promise<SendTransactionResult>]
      returns: void
    }>
    & Record<'unListingNFT(uint64,asset)void' | 'unListingNFT', {
      argsObj: {
        orderId: bigint | number
        nft: number | bigint
      }
      argsTuple: [orderId: bigint | number, nft: number | bigint]
      returns: void
    }>
    & Record<'buyNFTFromMarketplace(uint64,pay,asset)void' | 'buyNFTFromMarketplace', {
      argsObj: {
        orderId: bigint | number
        payment: TransactionToSign | Transaction | Promise<SendTransactionResult>
        nft: number | bigint
      }
      argsTuple: [orderId: bigint | number, payment: TransactionToSign | Transaction | Promise<SendTransactionResult>, nft: number | bigint]
      returns: void
    }>
    & Record<'createApplication()void' | 'createApplication', {
      argsObj: {
      }
      argsTuple: []
      returns: void
    }>
  /**
   * Defines the shape of the global and local state of the application.
   */
  state: {
    global: {
      'collectionIndex'?: IntegerState
      'nft'?: IntegerState
      'nftIndex'?: IntegerState
      'orderIndex'?: IntegerState
    }
  }
}
/**
 * Defines the possible abi call signatures
 */
export type AlgorandNftMarketplaceSig = keyof AlgorandNftMarketplace['methods']
/**
 * Defines an object containing all relevant parameters for a single call to the contract. Where TSignature is undefined, a bare call is made
 */
export type TypedCallParams<TSignature extends AlgorandNftMarketplaceSig | undefined> = {
  method: TSignature
  methodArgs: TSignature extends undefined ? undefined : Array<ABIAppCallArg | undefined>
} & AppClientCallCoreParams & CoreAppCallArgs
/**
 * Defines the arguments required for a bare call
 */
export type BareCallArgs = Omit<RawAppCallArgs, keyof CoreAppCallArgs>
/**
 * Maps a method signature from the AlgorandNftMarketplace smart contract to the method's arguments in either tuple of struct form
 */
export type MethodArgs<TSignature extends AlgorandNftMarketplaceSig> = AlgorandNftMarketplace['methods'][TSignature]['argsObj' | 'argsTuple']
/**
 * Maps a method signature from the AlgorandNftMarketplace smart contract to the method's return type
 */
export type MethodReturn<TSignature extends AlgorandNftMarketplaceSig> = AlgorandNftMarketplace['methods'][TSignature]['returns']

/**
 * A factory for available 'create' calls
 */
export type AlgorandNftMarketplaceCreateCalls = (typeof AlgorandNftMarketplaceCallFactory)['create']
/**
 * Defines supported create methods for this smart contract
 */
export type AlgorandNftMarketplaceCreateCallParams =
  | (TypedCallParams<'createApplication()void'> & (OnCompleteNoOp))
/**
 * Defines arguments required for the deploy method.
 */
export type AlgorandNftMarketplaceDeployArgs = {
  deployTimeParams?: TealTemplateParams
  /**
   * A delegate which takes a create call factory and returns the create call params for this smart contract
   */
  createCall?: (callFactory: AlgorandNftMarketplaceCreateCalls) => AlgorandNftMarketplaceCreateCallParams
}


/**
 * Exposes methods for constructing all available smart contract calls
 */
export abstract class AlgorandNftMarketplaceCallFactory {
  /**
   * Gets available create call factories
   */
  static get create() {
    return {
      /**
       * Constructs a create call for the AlgorandNftMarketplace smart contract using the createApplication()void ABI method
       *
       * @param args Any args for the contract call
       * @param params Any additional parameters for the call
       * @returns A TypedCallParams object for the call
       */
      createApplication(args: MethodArgs<'createApplication()void'>, params: AppClientCallCoreParams & CoreAppCallArgs & AppClientCompilationParams & (OnCompleteNoOp) = {}) {
        return {
          method: 'createApplication()void' as const,
          methodArgs: Array.isArray(args) ? args : [],
          ...params,
        }
      },
    }
  }

  /**
   * Constructs a no op call for the createCollection(string)void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static createCollection(args: MethodArgs<'createCollection(string)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'createCollection(string)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.name],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the mintNFT(string,string)uint64 ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static mintNft(args: MethodArgs<'mintNFT(string,string)uint64'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'mintNFT(string,string)uint64' as const,
      methodArgs: Array.isArray(args) ? args : [args.name, args.url],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the mapNFTdata(asset,uint64)void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static mapNfTdata(args: MethodArgs<'mapNFTdata(asset,uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'mapNFTdata(asset,uint64)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.nft, args.collectionId],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the listingNFT(asset,uint64,axfer)void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static listingNft(args: MethodArgs<'listingNFT(asset,uint64,axfer)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'listingNFT(asset,uint64,axfer)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.nft, args.price, args.axfer],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the unListingNFT(uint64,asset)void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static unListingNft(args: MethodArgs<'unListingNFT(uint64,asset)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'unListingNFT(uint64,asset)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.orderId, args.nft],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the buyNFTFromMarketplace(uint64,pay,asset)void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static buyNftFromMarketplace(args: MethodArgs<'buyNFTFromMarketplace(uint64,pay,asset)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'buyNFTFromMarketplace(uint64,pay,asset)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.orderId, args.payment, args.nft],
      ...params,
    }
  }
}

/**
 * A client to make calls to the AlgorandNftMarketplace smart contract
 */
export class AlgorandNftMarketplaceClient {
  /**
   * The underlying `ApplicationClient` for when you want to have more flexibility
   */
  public readonly appClient: ApplicationClient

  private readonly sender: SendTransactionFrom | undefined

  /**
   * Creates a new instance of `AlgorandNftMarketplaceClient`
   *
   * @param appDetails appDetails The details to identify the app to deploy
   * @param algod An algod client instance
   */
  constructor(appDetails: AppDetails, private algod: Algodv2) {
    this.sender = appDetails.sender
    this.appClient = algokit.getAppClient({
      ...appDetails,
      app: APP_SPEC
    }, algod)
  }

  /**
   * Checks for decode errors on the AppCallTransactionResult and maps the return value to the specified generic type
   *
   * @param result The AppCallTransactionResult to be mapped
   * @param returnValueFormatter An optional delegate to format the return value if required
   * @returns The smart contract response with an updated return value
   */
  protected mapReturnValue<TReturn>(result: AppCallTransactionResult, returnValueFormatter?: (value: any) => TReturn): AppCallTransactionResultOfType<TReturn> {
    if(result.return?.decodeError) {
      throw result.return.decodeError
    }
    const returnValue = result.return?.returnValue !== undefined && returnValueFormatter !== undefined
      ? returnValueFormatter(result.return.returnValue)
      : result.return?.returnValue as TReturn | undefined
      return { ...result, return: returnValue }
  }

  /**
   * Calls the ABI method with the matching signature using an onCompletion code of NO_OP
   *
   * @param typedCallParams An object containing the method signature, args, and any other relevant parameters
   * @param returnValueFormatter An optional delegate which when provided will be used to map non-undefined return values to the target type
   * @returns The result of the smart contract call
   */
  public async call<TSignature extends keyof AlgorandNftMarketplace['methods']>(typedCallParams: TypedCallParams<TSignature>, returnValueFormatter?: (value: any) => MethodReturn<TSignature>) {
    return this.mapReturnValue<MethodReturn<TSignature>>(await this.appClient.call(typedCallParams), returnValueFormatter)
  }

  /**
   * Idempotently deploys the AlgorandNftMarketplace smart contract.
   *
   * @param params The arguments for the contract calls and any additional parameters for the call
   * @returns The deployment result
   */
  public deploy(params: AlgorandNftMarketplaceDeployArgs & AppClientDeployCoreParams = {}): ReturnType<ApplicationClient['deploy']> {
    const createArgs = params.createCall?.(AlgorandNftMarketplaceCallFactory.create)
    return this.appClient.deploy({
      ...params,
      createArgs,
      createOnCompleteAction: createArgs?.onCompleteAction,
    })
  }

  /**
   * Gets available create methods
   */
  public get create() {
    const $this = this
    return {
      /**
       * Creates a new instance of the AlgorandNftMarketplace smart contract using the createApplication()void ABI method.
       *
       * @param args The arguments for the smart contract call
       * @param params Any additional parameters for the call
       * @returns The create result
       */
      async createApplication(args: MethodArgs<'createApplication()void'>, params: AppClientCallCoreParams & AppClientCompilationParams & (OnCompleteNoOp) = {}): Promise<AppCallTransactionResultOfType<MethodReturn<'createApplication()void'>>> {
        return $this.mapReturnValue(await $this.appClient.create(AlgorandNftMarketplaceCallFactory.create.createApplication(args, params)))
      },
    }
  }

  /**
   * Makes a clear_state call to an existing instance of the AlgorandNftMarketplace smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The clear_state result
   */
  public clearState(args: BareCallArgs & AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.appClient.clearState(args)
  }

  /**
   * Calls the createCollection(string)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public createCollection(args: MethodArgs<'createCollection(string)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(AlgorandNftMarketplaceCallFactory.createCollection(args, params))
  }

  /**
   * Calls the mintNFT(string,string)uint64 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public mintNft(args: MethodArgs<'mintNFT(string,string)uint64'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(AlgorandNftMarketplaceCallFactory.mintNft(args, params))
  }

  /**
   * Calls the mapNFTdata(asset,uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public mapNfTdata(args: MethodArgs<'mapNFTdata(asset,uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(AlgorandNftMarketplaceCallFactory.mapNfTdata(args, params))
  }

  /**
   * Calls the listingNFT(asset,uint64,axfer)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public listingNft(args: MethodArgs<'listingNFT(asset,uint64,axfer)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(AlgorandNftMarketplaceCallFactory.listingNft(args, params))
  }

  /**
   * Calls the unListingNFT(uint64,asset)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public unListingNft(args: MethodArgs<'unListingNFT(uint64,asset)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(AlgorandNftMarketplaceCallFactory.unListingNft(args, params))
  }

  /**
   * Calls the buyNFTFromMarketplace(uint64,pay,asset)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public buyNftFromMarketplace(args: MethodArgs<'buyNFTFromMarketplace(uint64,pay,asset)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(AlgorandNftMarketplaceCallFactory.buyNftFromMarketplace(args, params))
  }

  /**
   * Extracts a binary state value out of an AppState dictionary
   *
   * @param state The state dictionary containing the state value
   * @param key The key of the state value
   * @returns A BinaryState instance containing the state value, or undefined if the key was not found
   */
  private static getBinaryState(state: AppState, key: string): BinaryState | undefined {
    const value = state[key]
    if (!value) return undefined
    if (!('valueRaw' in value))
      throw new Error(`Failed to parse state value for ${key}; received an int when expected a byte array`)
    return {
      asString(): string {
        return value.value
      },
      asByteArray(): Uint8Array {
        return value.valueRaw
      }
    }
  }

  /**
   * Extracts a integer state value out of an AppState dictionary
   *
   * @param state The state dictionary containing the state value
   * @param key The key of the state value
   * @returns An IntegerState instance containing the state value, or undefined if the key was not found
   */
  private static getIntegerState(state: AppState, key: string): IntegerState | undefined {
    const value = state[key]
    if (!value) return undefined
    if ('valueRaw' in value)
      throw new Error(`Failed to parse state value for ${key}; received a byte array when expected a number`)
    return {
      asBigInt() {
        return typeof value.value === 'bigint' ? value.value : BigInt(value.value)
      },
      asNumber(): number {
        return typeof value.value === 'bigint' ? Number(value.value) : value.value
      },
    }
  }

  /**
   * Returns the smart contract's global state wrapped in a strongly typed accessor with options to format the stored value
   */
  public async getGlobalState(): Promise<AlgorandNftMarketplace['state']['global']> {
    const state = await this.appClient.getGlobalState()
    return {
      get collectionIndex() {
        return AlgorandNftMarketplaceClient.getIntegerState(state, 'collectionIndex')
      },
      get nft() {
        return AlgorandNftMarketplaceClient.getIntegerState(state, 'nft')
      },
      get nftIndex() {
        return AlgorandNftMarketplaceClient.getIntegerState(state, 'nftIndex')
      },
      get orderIndex() {
        return AlgorandNftMarketplaceClient.getIntegerState(state, 'orderIndex')
      },
    }
  }

  public compose(): AlgorandNftMarketplaceComposer {
    const client = this
    const atc = new AtomicTransactionComposer()
    let promiseChain:Promise<unknown> = Promise.resolve()
    const resultMappers: Array<undefined | ((x: any) => any)> = []
    return {
      createCollection(args: MethodArgs<'createCollection(string)void'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.createCollection(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      mintNft(args: MethodArgs<'mintNFT(string,string)uint64'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.mintNft(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      mapNfTdata(args: MethodArgs<'mapNFTdata(asset,uint64)void'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.mapNfTdata(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      listingNft(args: MethodArgs<'listingNFT(asset,uint64,axfer)void'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.listingNft(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      unListingNft(args: MethodArgs<'unListingNFT(uint64,asset)void'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.unListingNft(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      buyNftFromMarketplace(args: MethodArgs<'buyNFTFromMarketplace(uint64,pay,asset)void'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.buyNftFromMarketplace(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      clearState(args?: BareCallArgs & AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.clearState({...args, sendParams: {...args?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      addTransaction(txn: TransactionWithSigner | TransactionToSign | Transaction | Promise<SendTransactionResult>, defaultSender?: SendTransactionFrom) {
        promiseChain = promiseChain.then(async () => atc.addTransaction(await algokit.getTransactionWithSigner(txn, defaultSender ?? client.sender)))
        return this
      },
      async atc() {
        await promiseChain
        return atc
      },
      async execute() {
        await promiseChain
        const result = await algokit.sendAtomicTransactionComposer({ atc, sendParams: {} }, client.algod)
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val.returnValue) : val.returnValue)
        }
      }
    } as unknown as AlgorandNftMarketplaceComposer
  }
}
export type AlgorandNftMarketplaceComposer<TReturns extends [...any[]] = []> = {
  /**
   * Calls the createCollection(string)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  createCollection(args: MethodArgs<'createCollection(string)void'>, params?: AppClientCallCoreParams & CoreAppCallArgs): AlgorandNftMarketplaceComposer<[...TReturns, MethodReturn<'createCollection(string)void'>]>

  /**
   * Calls the mintNFT(string,string)uint64 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  mintNft(args: MethodArgs<'mintNFT(string,string)uint64'>, params?: AppClientCallCoreParams & CoreAppCallArgs): AlgorandNftMarketplaceComposer<[...TReturns, MethodReturn<'mintNFT(string,string)uint64'>]>

  /**
   * Calls the mapNFTdata(asset,uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  mapNfTdata(args: MethodArgs<'mapNFTdata(asset,uint64)void'>, params?: AppClientCallCoreParams & CoreAppCallArgs): AlgorandNftMarketplaceComposer<[...TReturns, MethodReturn<'mapNFTdata(asset,uint64)void'>]>

  /**
   * Calls the listingNFT(asset,uint64,axfer)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  listingNft(args: MethodArgs<'listingNFT(asset,uint64,axfer)void'>, params?: AppClientCallCoreParams & CoreAppCallArgs): AlgorandNftMarketplaceComposer<[...TReturns, MethodReturn<'listingNFT(asset,uint64,axfer)void'>]>

  /**
   * Calls the unListingNFT(uint64,asset)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  unListingNft(args: MethodArgs<'unListingNFT(uint64,asset)void'>, params?: AppClientCallCoreParams & CoreAppCallArgs): AlgorandNftMarketplaceComposer<[...TReturns, MethodReturn<'unListingNFT(uint64,asset)void'>]>

  /**
   * Calls the buyNFTFromMarketplace(uint64,pay,asset)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  buyNftFromMarketplace(args: MethodArgs<'buyNFTFromMarketplace(uint64,pay,asset)void'>, params?: AppClientCallCoreParams & CoreAppCallArgs): AlgorandNftMarketplaceComposer<[...TReturns, MethodReturn<'buyNFTFromMarketplace(uint64,pay,asset)void'>]>

  /**
   * Makes a clear_state call to an existing instance of the AlgorandNftMarketplace smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  clearState(args?: BareCallArgs & AppClientCallCoreParams & CoreAppCallArgs): AlgorandNftMarketplaceComposer<[...TReturns, undefined]>

  /**
   * Adds a transaction to the composer
   *
   * @param txn One of: A TransactionWithSigner object (returned as is), a TransactionToSign object (signer is obtained from the signer property), a Transaction object (signer is extracted from the defaultSender parameter), an async SendTransactionResult returned by one of algokit utils helpers (signer is obtained from the defaultSender parameter)
   * @param defaultSender The default sender to be used to obtain a signer where the object provided to the transaction parameter does not include a signer.
   */
  addTransaction(txn: TransactionWithSigner | TransactionToSign | Transaction | Promise<SendTransactionResult>, defaultSender?: SendTransactionFrom): AlgorandNftMarketplaceComposer<TReturns>
  /**
   * Returns the underlying AtomicTransactionComposer instance
   */
  atc(): Promise<AtomicTransactionComposer>
  /**
   * Executes the transaction group and returns an array of results
   */
  execute(): Promise<AlgorandNftMarketplaceComposerResults<TReturns>>
}
export type AlgorandNftMarketplaceComposerResults<TReturns extends [...any[]]> = {
  returns: TReturns
  groupId: string
  txIds: string[]
  transactions: Transaction[]
}
